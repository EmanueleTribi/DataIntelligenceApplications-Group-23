import numpy as np
from SocialNetwork.social_network_environment import *

# Function that estimates the influence generated by a set of bids given the iterations
def estimate_bids_influence(social_network=None, ad_allocation_list=None, learner_id=1, slot_prominence=None, iterations=None):
    adj_matrix = social_network.adj_matrix
    nodes_count = np.zeros(adj_matrix.shape[0])

    for _ in range(iterations):
        for node in range(0, adj_matrix.shape[0]):
            category = social_network.categories[node] - 1
            slot = next((index for index, value in enumerate(ad_allocation_list[category]) if value == learner_id), None)

            if slot != None:
                click_probability = (slot_prominence[slot])*(social_network.weights_fictitious_nodes[node])
            else:
                click_probability = 0
            
            social_network.active_nodes[node] = np.random.binomial(n=1, p=click_probability)
        
        activations = leg_sample(adj_matrix, social_network.active_nodes)
        nodes_count = np.array(nodes_count + activations)

        # Returns the probability that a given node gets activated due to influence given the set of bids
        # Note that the average number of nodes activated in the net can be obtained as np.mean(nodes_count/iterations) * n_nodes
    return nodes_count / iterations


# Function that samples a live-edge graph (leg) given the seeds (active nodes)
def leg_sample(prob_matrix, seeds):
    active_nodes = seeds
    activated_nodes = active_nodes
    newly_active_nodes = active_nodes

    while( np.sum(newly_active_nodes) > 0 ) :
        p = (prob_matrix.T * active_nodes).T
        activated_edges = p > np.random.rand(p.shape[0], p.shape[1])
        newly_active_nodes = (np.sum(activated_edges, axis = 0) > 0) * (1-activated_nodes)
        activated_nodes = np.array(activated_nodes + newly_active_nodes)
        active_nodes = newly_active_nodes
    
    return activated_nodes


# Function that estimates the average number of seeds generated by a set of bids
def estimate_seeds(social_network=None, ad_allocation_list=None, learner_id=1, slot_prominence=None, iterations=None):
    adj_matrix = social_network.adj_matrix
    nodes_count = 0

    for _ in range(iterations):
        for node in range(0, adj_matrix.shape[0]):
            category = social_network.categories[node] - 1
            slot = next((index for index, value in enumerate(ad_allocation_list[category]) if value == learner_id), None)

            if slot != None:
                click_probability = (slot_prominence[slot])*(social_network.weights_fictitious_nodes[node])
            else:
                click_probability = 0
            
            social_network.active_nodes[node] = np.random.binomial(n=1, p=click_probability)
    
        nodes_count += np.sum(social_network.active_nodes)
    
    return nodes_count/iterations